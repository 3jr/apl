// Generated by CoffeeScript 1.4.0
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(function() {
  var compile;
  compile = require('./compiler').compile;
  return {
    preprocess: function(coffeeCode) {
      var fragments, i, indent, indentRE, j, lines, _ref;
      fragments = [];
      coffeeCode = coffeeCode.replace(/«([^»]*)»/g, function(_1, aplCode) {
        fragments.push({
          kind: 'expression',
          aplCode: aplCode
        });
        return "`@" + (fragments.length - 1) + "`";
      });
      lines = coffeeCode.split('\n');
      i = 0;
      while (i < lines.length) {
        if (/~>$/.test(lines[i])) {
          indent = lines[i].replace(/^([ \t]*).*$/, '$1');
          indentRE = new RegExp('^' + indent.replace(/\t/g, '\\t') + '[ \\t]');
          j = i + 1;
          while (j < lines.length && (/^[ \t]*([#⍝].*)?$/.test(lines[j]) || indentRE.test(lines[j]))) {
            j++;
          }
          fragments.push({
            kind: 'function',
            aplCode: lines.slice(i + 1, j).join('\n')
          });
          [].splice.apply(lines, [i, j - i].concat(_ref = [lines[i].replace(/~>$/, "`@" + (fragments.length - 1) + "`")])), _ref;
        }
        i++;
      }
      coffeeCode = lines.join('\n');
      return coffeeCode.replace(/`@(\d+)`/g, function(_1, id) {
        var f, jsCode;
        f = fragments[+id];
        jsCode = "(function () {\n  var _ = require('apl').createGlobalContext();\n  " + (compile(f.aplCode)) + "\n})";
        if (f.kind === 'expression') {
          jsCode += '()';
        }
        return "`" + jsCode + "`";
      });
    }
  };
});
