// Generated by CoffeeScript 1.3.3
(function() {

  $.fn.toggleVisibility = function() {
    return this.css('visibility', this.css('visibility') === 'hidden' ? '' : 'hidden');
  };

  $(function() {
    var isCapsOn, layoutIndex, layouts, updateLayout;
    setInterval((function() {
      return $('#cursor').toggleVisibility();
    }), 500);
    $('#editor span').live('mousedown', function(e) {
      if (e.pageX < $(e.target).position().left + $(e.target).width() / 2) {
        $('#cursor').insertBefore(this);
      } else {
        $('#cursor').insertAfter(this);
      }
      return false;
    });
    $('.key').live('mousedown', function() {
      var _this = this;
      $(this).addClass('down').trigger('aplkeypress');
      return setTimeout((function() {
        return $(_this).removeClass('down');
      }), 500);
    });
    layouts = [['qwertyuiopasdfghjklzxcvbnm', 'QWERTYUIOPASDFGHJKLZXCVBNM'], [' ⍵∈⍴∼↑↓⍳○⋆⍺⌈⌊ ∇∆∘◇⎕⊂⊃∩∪⊥⊤∣', ' ⌽⍷ ⍉  ⌷⍬⍟⊖   ⍒⍋ ÷⍞  ⍝ ⍎⍕ ']];
    layoutIndex = 0;
    isCapsOn = false;
    updateLayout = function() {
      var layout;
      layout = layouts[layoutIndex][+isCapsOn];
      $('.keyboard .key:not(.special)').each(function(i, e) {
        return $(e).text(layout[i]);
      });
    };
    updateLayout();
    $('.enter').on('aplkeypress', function() {
      return $('<br>').insertBefore('#cursor');
    });
    $('.space').on('aplkeypress', function() {
      return $('<span> </span>').insertBefore('#cursor');
    });
    $('.backspace').on('aplkeypress', function() {
      return $('#cursor').prev().remove();
    });
    $('.layoutSwitch').on('aplkeypress', function() {
      layoutIndex = (layoutIndex + 1) % layouts.length;
      return updateLayout();
    });
    $('.capsLock').on('aplkeypress', function() {
      isCapsOn = !isCapsOn;
      $(this).toggleClass('isOn', isCapsOn);
      return updateLayout();
    });
    return $('.key:not(.special)').live('aplkeypress', function() {
      return $('<span>').text($(this).text().replace(/[\ \t\r\n]+/g, '')).insertBefore('#cursor');
    });
  });

}).call(this);
