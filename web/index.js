// Generated by CoffeeScript 1.3.3
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(['../lib/compiler', '../lib/browser', '../lib/helpers'], function(compiler, browser, helpers) {
  var browserBuiltins, exec, inherit;
  exec = compiler.exec;
  browserBuiltins = browser.browserBuiltins;
  inherit = helpers.inherit;
  return jQuery(function($) {
    var a, code, esc, escHard, escT, execute, formatAsHTML, formatHTMLTable, hSymbolDefs, hashParams, hideTooltip, i, k, mapping, name, nameValue, rMapping, symbolDef, symbolDefs, tid, v, value, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
    escT = {
      '<': 'lt',
      '>': 'gt',
      '&': 'amp',
      "'": 'apos',
      '"': 'quot'
    };
    esc = function(s) {
      if (s) {
        return s.replace(/[<>&'"]/g, function(x) {
          return "&" + escT[x] + ";";
        });
      } else {
        return '';
      }
    };
    escHard = function(s) {
      return esc(s).replace(/\ /g, '&nbsp;').replace(/\n/g, '<br/>');
    };
    formatAsHTML = function(x) {
      var i, nPlanes, nc, nr, planeSize, planes, rx, sx, y, _ref;
      try {
        if (typeof x === 'string') {
          return "<span class='character'>" + (esc(x).replace(' ', '&nbsp;', 'g')) + "</span>";
        } else if (typeof x === 'number') {
          return "<span class='number'>" + (('' + x).replace(/-|Infinity/g, '¯')) + "</span>";
        } else if (typeof x === 'function') {
          return "<span class='function'>" + (x.isPrefixOperator || x.isInfixOperator || x.isPostfixOperator ? 'operator' : 'function') + (x.aplName ? ' ' + x.aplName : '') + "</span>";
        } else if (!(x.length != null)) {
          return "<span class='unknown'>" + (esc('' + x)) + "</span>";
        } else if (x.shape && x.shape.length > 2) {
          sx = x.shape;
          rx = sx.length;
          planeSize = sx[rx - 2] * sx[rx - 1];
          nPlanes = x.length / planeSize;
          planes = (function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; 0 <= nPlanes ? _i < nPlanes : _i > nPlanes; i = 0 <= nPlanes ? ++_i : --_i) {
              _results.push(formatHTMLTable(x.slice(i * planeSize, (i + 1) * planeSize), sx[rx - 1], sx[rx - 2], 'subarray'));
            }
            return _results;
          })();
          nc = sx[rx - 3];
          nr = nPlanes / nc;
          return formatHTMLTable(planes, nr, nc, 'array');
        } else {
          if (x.length === 0) {
            return "<table class='array empty'><tr><td>empty</table>";
          }
          _ref = x.shape || [1, x.length], nr = _ref[0], nc = _ref[1];
          x = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = x.length; _i < _len; _i++) {
              y = x[_i];
              _results.push(formatAsHTML(y));
            }
            return _results;
          })();
          return formatHTMLTable(x, nr, nc, 'array');
        }
      } catch (e) {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.error === "function") {
            console.error(e);
          }
        }
        return '<span class="error">Presentation error</span>';
      }
    };
    formatHTMLTable = function(a, nr, nc, cssClass) {
      var c, r, s, _i, _j;
      s = "<table class='" + cssClass + "'>";
      for (r = _i = 0; 0 <= nr ? _i < nr : _i > nr; r = 0 <= nr ? ++_i : --_i) {
        s += '<tr>';
        for (c = _j = 0; 0 <= nc ? _j < nc : _j > nc; c = 0 <= nc ? ++_j : --_j) {
          s += "<td>" + a[nc * r + c] + "</td>";
        }
        s += '</tr>';
      }
      return s += '</table>';
    };
    hashParams = {};
    if (location.hash) {
      _ref = location.hash.substring(1).split(',');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nameValue = _ref[_i];
        _ref1 = nameValue.split('='), name = _ref1[0], value = _ref1[1];
        hashParams[name] = unescape(value);
      }
    }
    $('#code').text(hashParams.code || '').focus();
    $('#permalink').bind('mouseover focus', function() {
      $(this).attr('href', '#code=' + escape($('#code').val()));
      return false;
    });
    execute = function() {
      var ctx, result;
      ctx = inherit(browserBuiltins);
      try {
        result = exec($('#code').val());
        $('#result').html(formatAsHTML(result));
      } catch (err) {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.error === "function") {
            console.error(err);
          }
        }
        $('#result').html("<div class='error'>" + (escHard(err.message)) + "</div>");
      }
    };
    $('#go').closest('form').submit(function() {
      execute();
      return false;
    });
    symbolDefs = [
      ['+', 'Conjugate, Add'], ['−', 'Negate, Subtract'], ['×', 'Sign of, Multiply'], ['÷', 'Reciprocal, Divide'], ['⌈', 'Ceiling, Greater of'], ['⌊', 'Floor, Lesser of'], ['∣', 'Absolute value, Residue'], ['⍳', 'Index generator, Index of'], ['?', 'Roll, Deal'], ['⋆', 'Exponential, To the power of'], ['⍟', 'Natural logarithm, Logarithm to the base'], ['○', 'Pi times, Circular and hyperbolic functions'], ['!', 'Factorial, Binomial'], ['⌹', 'Matrix inverse, Matrix divide'], ['<', 'Less than'], ['≤', 'Less than or equal'], ['=', 'Equal'], ['≥', 'Greater than or equal'], ['>', 'Greater than'], ['≠', 'Not equal'], ['≡', 'Depth, Match'], ['≢', 'Not match'], ['∈', 'Enlist, Membership'], ['⍷', 'Find'], ['∪', 'Unique, Union'], ['∩', 'Intersection'], ['∼', 'Not, Without'], ['∨', 'Or (Greatest Common Divisor)'], ['∧', 'And (Least Common Multiple)'], ['⍱', 'Nor'], ['⍲', 'Nand'], ['⍴', 'Shape of, Reshape'], [',', 'Ravel, Catenate'], ['⍪', 'First axis catenate'], ['⌽', 'Reverse, Rotate'], ['⊖', 'First axis rotate'], ['⍉', 'Transpose'], ['↑', 'First, Take'], ['↓', 'Drop'], ['⊂', 'Enclose, Partition'], ['⊃', 'Disclose, Pick'], ['⌷', 'Index'], ['⍋', 'Grade up'], ['⍒', 'Grade down'], ['⊤', 'Encode'], ['⊥', 'Decode'], ['⍕', 'Format, Format by specification'], ['⍎', 'Execute'], ['⊣', 'Stop, Left'], ['⊢', 'Pass, Right'], ['⎕', 'Evaluated input, Output with a newline'], ['⍞', 'Character input, Bare output'], ['¨', 'Each'], [
        '∘.', 'Outer product', {
          keys: '`j.'
        }
      ], ['/', 'Reduce'], ['⌿', '1st axis reduce'], ['\\', 'Scan'], ['⍀', '1st axis scan'], ['⍣', 'Power operator'], ['¯', 'Negative number sign'], ['⍝', 'Comment'], ['←', 'Assignment'], ['⍬', 'Zilde'], ['◇', 'Statement separator'], ['⍺', 'Left formal parameter'], ['⍵', 'Right formal parameter']
    ];
    mapping = {};
    rMapping = {};
    a = '`< «   `= ×   `> »   `_ ≡   `- −   `, ⍪   `; ◇   `: ÷   `! ⍣   `/ ⌿   `( ⍱\n`) ⍲   `[ ←   `\\ ⍀  `0 ∧   `1 ¨   `2 ¯   `4 ≤   `6 ≥   `8 ≠   `9 ∨   `a ⍺\n`A ⊖   `b ⊥   `B ⍎   `c ∩   `C ⍝   `d ⌊   `e ∈   `E ⍷   `g ∇   `G ⍒   `h ∆\n`H ⍋   `i ⍳   `I ⌷   `j ∘   `l ⎕   `L ⍞   `m ∣   `n ⊤   `N ⍕   `o ○   `O ⍬\n`p ⋆   `P ⍟   `r ⍴   `s ⌈   `t ∼   `T ⍉   `u ↓   `v ∪   `w ⍵   `W ⌽   `x ⊃\n`y ↑   `z ⊂'.replace(/(^\s+|\s+$)/g, '').split(/\s+/);
    for (i = _j = 0, _ref2 = a.length / 2; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
      k = a[2 * i];
      v = a[2 * i + 1];
      mapping[k] = v;
      rMapping[v] = k;
    }
    hSymbolDefs = {};
    for (_k = 0, _len1 = symbolDefs.length; _k < _len1; _k++) {
      symbolDef = symbolDefs[_k];
      hSymbolDefs[symbolDef[0]] = symbolDef;
    }
    $('#code').keydown(function(event) {
      if (event.keyCode === 13 && event.ctrlKey) {
        $('#go').click();
        return false;
      }
    });
    $('#code').retype('on', {
      mapping: mapping
    });
    $('textarea').keyboard({
      layout: 'custom',
      useCombos: false,
      display: {
        bksp: 'Bksp',
        shift: '⇧',
        alt: 'Alt',
        enter: 'Enter',
        exec: 'GO'
      },
      autoAccept: true,
      usePreview: false,
      customLayout: {
        "default": ['1 2 3 4 5 6 7 8 9 0 - =', 'q w e r t y u i o p [ ]', 'a s d f g h j k l {enter}', '{shift} z x c v b n m , . {bksp}', '{alt} {space} {exec!!}'],
        shift: ['! @ # $ % ^ & * ( ) _ +', 'Q W E R T Y U I O P { }', 'A S D F G H J K L {enter}', '{shift} Z X C V B N M < > {bksp}', '{alt} {space} {exec!!}'],
        alt: ['¨ ¯ < ≤ = ≥ > ≠ ∨ ∧ − ×', '░ ⍵ ∈ ⍴ ∼ ↑ ↓ ⍳ ○ ⋆ ← ░', '⍺ ⌈ ⌊ ░ ∇ ∆ ∘ ░ ⎕ {enter}', '{shift} ⊂ ⊃ ∩ ∪ ⊥ ⊤ ∣ ⍪ ░ {bksp}', '{alt} {space} {exec!!}'],
        'alt-shift': ['⍣ ░ ░ ░ ░ ░ ░ ░ ⍱ ⍲ ≡ ░', '░ ⌽ ⍷ ░ ⍉ ░ ░ ⌷ ⍬ ⍟ ░ ░', '⊖ ░ ░ ░ ⍒ ⍋ ░ ░ ⍞ {enter}', '{shift} ░ ░ ⍝ ░ ⍎ ⍕ ░ « » {bksp}', '{alt} {space} {exec!!}']
      }
    });
    $.keyboard.keyaction.exec = execute;
    tid = null;
    $('body').on('mouseover', '.ui-keyboard-button', function(event) {
      clearTimeout(tid);
      return tid = setTimeout(function() {
        var $e, ch, description, opts, p, sd;
        if ((sd = hSymbolDefs[$(event.target).text()])) {
          ch = sd[0], description = sd[1], opts = sd[2];
          $e = $(event.target).closest('.ui-keyboard-button');
          p = $e.offset();
          $('#tooltip .content').html(description);
          $('#tooltip').show().css({
            left: p.left - ($('#tooltip').width() - $e.width()) / 2,
            top: p.top - $('#tooltip').height()
          });
        }
        return tid = null;
      }, 500);
    });
    hideTooltip = function() {
      $('#tooltip').hide();
      clearTimeout(tid);
      return tid = null;
    };
    $('body').on('mouseout', '.ui-keyboard-button', hideTooltip);
    $('#code').blur(hideTooltip);
    $('#tooltip').mouseout(hideTooltip);
    _ref3 = window.examples;
    for (i = _l = 0, _len2 = _ref3.length; _l < _len2; i = ++_l) {
      _ref4 = _ref3[i], name = _ref4[0], code = _ref4[1];
      $('#examples').append(" <a href='#example" + i + "'>" + name + "</a>");
    }
    $('#examples a').live('click', function() {
      var _ref5;
      _ref5 = window.examples[parseInt($(this).attr('href').replace(/#example(\d+)$/, '$1'))], name = _ref5[0], code = _ref5[1];
      $('#code').val(code).focus();
      return false;
    });
    return {};
  });
});
