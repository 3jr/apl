// Generated by CoffeeScript 1.4.0
var S, all, eq, exec, fail, fails, gives, identityFunction, nFailed, nTests, parser, repr, t0;

parser = require('../lib/parser').parser;

exec = require('../lib/compiler').exec;

repr = JSON.stringify;

t0 = Date.now();

nTests = 0;

nFailed = 0;

identityFunction = function() {
  return this;
};

all = function(a, f) {
  var x, _i, _len;
  if (f == null) {
    f = identityFunction;
  }
  for (_i = 0, _len = a.length; _i < _len; _i++) {
    x = a[_i];
    if (!f.call(x)) {
      return false;
    }
  }
  return true;
};

eq = function(x, y) {
  var _i, _ref, _ref1, _results;
  if (typeof x !== typeof y) {
    return false;
  } else if ((_ref = typeof x) === 'number' || _ref === 'string') {
    return x === y;
  } else if (x.length !== y.length) {
    return false;
  } else {
    return all((function() {
      _results = [];
      for (var _i = 0, _ref1 = x.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this), function() {
      return eq(x[this], y[this]);
    });
  }
};

fail = function(reason, err) {
  nFailed++;
  console.error(reason);
  if (err) {
    return console.error(err.stack);
  }
};

gives = function(code, expected) {
  var actual;
  nTests++;
  try {
    actual = exec(code);
    if (!eq(actual, expected)) {
      return fail("Test " + (repr(code)) + " failed: expected " + (repr(expected)) + " but got " + (repr(actual)));
    }
  } catch (e) {
    return fail("Test " + (repr(code)) + " failed with " + e, e);
  }
};

fails = function(code, expectedErrorMessage) {
  nTests++;
  try {
    exec(code);
    return fail("Code " + (repr(code)) + " should have failed, but didn't");
  } catch (e) {
    if (expectedErrorMessage && e.message.slice(0, expectedErrorMessage.length) !== expectedErrorMessage) {
      return fail("Code " + (repr(code)) + " should have failed with " + (repr(expectedErrorMessage)) + ", but it failed with " + (repr(e.message)), e);
    }
  }
};

S = function(s) {
  return s.split('');
};

gives('1 2 3', [1, 2, 3]);

gives('(1 2 3)', [1, 2, 3]);

gives('123', 123);

gives('¯123', -123);

gives('(123)', 123);

gives('"123"', ['1', '2', '3']);

gives("'123'", ['1', '2', '3']);

gives('1 "2" (3 4)', [1, ['2'], [3, 4]]);

gives('1234567890', 1234567890);

gives('12.34e56', 12.34e56);

gives('12.34e+56', 12.34e+56);

gives('12.34E56', 12.34e56);

gives('¯12.34e¯56', -12.34e-56);

gives('0Xffff', 0xffff);

gives('¯0xffff', -0xffff);

gives('¯0xaBcD1234', -0xabcd1234);

gives('""', []);

gives('"\\f\\t\\n\\r\\u1234\\xff"', S('\f\t\n\r\u1234\xff'));

fails('"a\nb"');

fails('"a');

gives("¯", Infinity);

gives("¯¯", -Infinity);

gives("−¯", -Infinity);

gives('  \'Let\'\'s parse it!\'  ', S('Let\'s parse it!'));

gives('  "0x22\'s the code for ""."  ', S('0x22\'s the code for ".'));

gives('⍳ 0', []);

gives('⍴ 0', []);

gives('⍬', []);

gives('⍬⍬', [[], []]);

gives('1⍬2⍬3', [1, [], 2, [], 3]);

gives('', []);

gives('1\n2', 2);

gives('1\r2', 2);

gives('1 ◇ 2 ◇ 3', 3);

gives('A←5', 5);

gives('A×A←2 5', [4, 25]);

gives('radius ← 3\nget_circumference ← {2 × ○ radius}\nget_surface ← {○ radius ⋆ 2}\n\nbefore ← 0.01× ⌊ 100× radius circumference surface\nradius ← radius + 1\nafter  ← 0.01× ⌊ 100× radius circumference surface\n\nbefore after', [[3, 18.84, 28.27], [4, 25.13, 50.26]]);

gives("x ← «{'⍟': function (y) { return y + 1234; }}» ◇ x ⍟ 1", 1235);

gives("x ← «{'⍟': function (y) { return y + 1234; }}» ◇ 1 ⍟ x", 1235);

gives("x ← «{'⍟': function (y) { return y + 1234; }}» ◇ x ⍟ 1 1", [1235, 1235]);

gives("x ← «{'⍟': function (y) { return y + 1234; }}» ◇ x x ⍟ 1", [1235, 1235]);

gives("x ← «{'⍟': function () { return 1234; }}» ◇ ⍟ x", 1234);

gives("x ← «{'⍟': function () { return 1234; }}» ◇ ⍟ x", 1234);

gives("x ← «{'⍟': function () { return 1234; }}» ◇ ⍟ x x", [1234, 1234]);

gives('(23 54 38)[0]', 23);

gives('(23 54 38)[1]', 54);

gives('(23 54 38)[2]', 38);

fails('(23 54 38)[3]');

fails('(23 54 38)[¯1]');

gives('(23 54 38)[0 2]', [23, 38]);

gives('(2 3 ⍴ 100 101 102 110 111 112)[1;2]', 112);

fails('(2 3 ⍴ 100 101 102 110 111 112)[1;¯1]');

fails('(2 3 ⍴ 100 101 102 110 111 112)[10;1]');

gives('"hello"[1]', 'e');

gives('"ipodlover"[1 2 5 8 3 7 6 0 4]', S('poordevil'));

gives('("axlrose"[4 3 0 2 5 6 1])[0 1 2 3]', S('oral'));

gives('" X"[(3 3⍴⍳9) ∈ 1 3 6 7 8]', S(' X ' + 'X  ' + 'XXX'));

gives('{1 + 1} 1', 2);

gives('{⍵=0:1 ◇ 2×∇⍵−1} 5', 32);

gives('{ ⍵<2 : 1   ◇   (∇⍵−1)+(∇⍵−2) } 8', 34);

gives('«1234+5678»', 6912);

gives('«"asdf"»', S('asdf'));

gives('10⊤5 15 125', [5, 5, 5]);

gives('0 10⊤5 15 125', [0, 1, 12, 5, 5, 5]);

gives('(8 3⍴ 2 0 0\
             2 0 0\
             2 0 0\
             2 0 0\
             2 8 0\
             2 8 0\
             2 8 16\
             2 8 16) ⊤ 75', [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 4, 1, 3, 11]);

gives('M ← 3 8 ⍴\
                  0 0 0 0 1 1 1 1\
                  0 0 1 1 0 0 1 1\
                  0 1 0 1 0 1 0 1\
       ◇\
       A ← 4 3 ⍴\
                  1 1 1\
                  2 2 2\
                  3 3 3\
                  4 4 4\
       ◇\
       A ⊥ M', [0, 1, 1, 2, 1, 2, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 3, 4, 9, 10, 12, 13, 0, 1, 4, 5, 16, 17, 20, 21]);

gives('M ← 3 8 ⍴\
                  0 0 0 0 1 1 1 1\
                  0 0 1 1 0 0 1 1\
                  0 1 0 1 0 1 0 1\
       ◇\
       2 ⊥ M', [0, 1, 2, 3, 4, 5, 6, 7]);

gives('M ← 3 8 ⍴\
                  0 0 0 0 1 1 1 1\
                  0 0 1 1 0 0 1 1\
                  0 1 0 1 0 1 0 1\
       ◇\
       A ← 2 1 ⍴ 2 10\
       ◇\
       A ⊥ M', [0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 100, 101, 110, 111]);

gives('2 3 4 ∘.× 1 2 3 4', [2, 4, 6, 8, 3, 6, 9, 12, 4, 8, 12, 16]);

gives('0 1 2 3 4 ∘.! 0 1 2 3 4', [1, 1, 1, 1, 1, 0, 1, 2, 3, 4, 0, 0, 1, 3, 6, 0, 0, 0, 1, 4, 0, 0, 0, 0, 1]);

gives('1 2 ∘., 1+⍳3', [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3]]);

gives('⍴ 1 2 ∘., 1+⍳3', [2, 3]);

gives('2 3 ∘.↑ 1 2', [[1, 0], [2, 0], [1, 0, 0], [2, 0, 0]]);

gives('⍴ 2 3 ∘.↑ 1 2', [2, 2]);

gives('⍴ ((4 3 ⍴ 0) ∘.+ (5 2 ⍴ 0))', [4, 3, 5, 2]);

gives('2 3 ∘.× 4 5', [8, 10, 12, 15]);

gives('2 3 ∘.{⍺×⍵} 4 5', [8, 10, 12, 15]);

gives('({⍵+1}⍣5) 3', 8);

gives('({⍵+1}⍣0) 3', 3);

gives('(⍴⍣3) 2 2⍴⍳4', [1]);

gives('r ← (3 3 ⍴ ⍳ 9) ∈ 1 2 3 4 7', [0, 1, 1, 1, 1, 0, 0, 1, 0]);

gives('r ← (3 3 ⍴ ⍳ 9) ∈ 1 2 3 4 7\n¯1 ⊖ ¯2 ⌽ 5 7 ↑ r', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

gives('r ← (3 3 ⍴ ⍳ 9) ∈ 1 2 3 4 7\nR ← ¯1 ⊖ ¯2 ⌽ 5 7 ↑ r\n1 0 ¯1 ⌽¨ R R R', [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]);

if (nFailed) {
  console.info("" + nFailed + " of " + nTests + " tests failed.");
} else {
  console.info("All " + nTests + " tests passed in " + (Date.now() - t0) + " ms.");
}
